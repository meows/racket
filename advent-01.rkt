#lang racket

(require (rename-in racket/base [define fn]))
(require threading)
(require srfi/26)

(fn mod10 (cut remainder <> 10))
(fn div10 (cut quotient <> 10))

;; -----------------------------------------------------------------------------
;; Advent of Code 01


; 1122 produces a sum of 3 (1 + 2) because the first digit (1) matches the second digit and the third digit (2) matches the fourth digit.
; 1111 produces 4 because each digit (all 1) matches the next.
; 1234 produces 0 because no digit matches the next.
; 91212129 produces 9 because the only digit that matches the next one is the last digit, 9.

(define data

; natural → list <natural> (number into list of digits)
(fn (N->list n)
    (fn (loop n #:result [result (list)])
        (if (zero? n)
            result
            (loop (div10 n)
                  #:result (cons (mod10 n) result))))
    (if (zero? n) 1 (loop n)))

(fn integers (N->list data))

; list <natural> → natural
(fn (advent lst)
    (foldl (λ (item sum)
              ()
           )
    
    )
)

(advent integers)